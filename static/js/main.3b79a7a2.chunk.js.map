{"version":3,"sources":["components/Button.js","components/UsersList.js","components/App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","onClick","click","UsersList","users","map","user","className","key","login","uuid","src","picture","large","alt","name","last","first","location","state","phone","email","API","App","handleDataFetch","fetch","then","response","ok","Error","status","json","data","results","_this","setState","prevState","concat","catch","error","console","log","this","src_components_Button","length","src_components_UsersList","Component","Boolean","window","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSASeA,eANA,SAACC,GACb,OACIC,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,EAAMK,OAAvB,4BCsBQC,SAvBG,SAACN,GAEf,IAAMO,EAAQP,EAAMO,MAAMC,IAAI,SAAAC,GAAI,OAC9BR,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OAAOC,IAAKF,EAAKG,MAAMC,MAClCZ,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WACXT,EAAAC,EAAAC,cAAA,OAAKW,IAAKL,EAAKM,QAAQC,MAAOC,IAAKR,EAAKS,KAAKC,QAEjDlB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACXT,EAAAC,EAAAC,cAAA,UAAKM,EAAKS,KAAKE,MAAf,IAAuBX,EAAKS,KAAKC,MACjClB,EAAAC,EAAAC,cAAA,UAAKM,EAAKY,SAASC,OACnBrB,EAAAC,EAAAC,cAAA,UAAKM,EAAKY,SAASC,OACnBrB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,sBAAH,IAAwBM,EAAKc,OAC7BtB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,sBAAH,IAAwBM,EAAKe,WAI3C,OACIvB,EAAAC,EAAAC,cAAA,UACEI,KCjBFkB,EAAM,uCAyCGC,6MArCXJ,MAAQ,CACJf,MAAO,MAGXoB,gBAAkB,WACdC,MAAMH,GACDI,KAAK,SAAAC,GACN,GAAGA,EAASC,GACR,OAAOD,EAEX,MAAME,MAAMF,EAASG,UAEpBJ,KAAK,SAAAC,GAAQ,OAAIA,EAASI,SAC1BL,KAAK,SAAAM,GACN,IAAM1B,EAAO0B,EAAKC,QAElBC,EAAKC,SAAS,SAAAC,GAAS,MAAK,CACxBhC,MAAOgC,EAAUhC,MAAMiC,OAAO/B,QAGjCgC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,8EAOlC,IAAMnC,EAAQsC,KAAKvB,MAAMf,MAC3B,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2C,EAAD,CAAQzC,MAAOwC,KAAKlB,kBACnBpB,EAAMwC,OAAS,EAAI9C,EAAAC,EAAAC,cAAC6C,EAAD,CAAWzC,MAAOA,IAAWA,UAjCvC0C,aCKEC,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.3b79a7a2.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => {\n   return (\n       <button onClick={props.click}>Dodaj u≈ºytkownika</button>\n   ) \n}\n\nexport default Button;\n","import React from 'react';\nimport './UsersList.css';\n\n\nconst UsersList = (props) => {\n    \n    const users = props.users.map(user => (\n        <div className=\"user\" key={user.login.uuid}>\n            <div className=\"picture\">\n                <img src={user.picture.large} alt={user.name.last}/>\n            </div>\n            <div className=\"user-info\">\n                <h1>{user.name.first} {user.name.last}</h1>\n                <h2>{user.location.state}</h2>\n                <h3>{user.location.state}</h3>\n                <p><span>Phone:</span> {user.phone}</p>\n                <p><span>Email:</span> {user.email}</p>\n            </div>\n        </div>\n    ))\n  return (\n      <ul>\n       {users}\n    </ul>\n    )\n}\n\nexport default UsersList;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Button from './Button';\nimport UsersList from './UsersList';\n\nconst API = 'https://randomuser.me/api/?results=1';\n\nclass App extends Component {\n    \n    state = {\n        users: [],\n    }\n\n    handleDataFetch = () => {\n        fetch(API)\n            .then(response => {\n            if(response.ok) {\n                return response;\n            }\n            throw Error(response.status)\n        })\n            .then(response => response.json())\n            .then(data => {\n            const user = data.results;\n            \n            this.setState(prevState => ({\n                users: prevState.users.concat(user),\n            }))\n        })\n            .catch(error => console.log(error))\n        \n    }\n\n    \n\n  render() {\n      const users = this.state.users;\n    return (\n      <div>\n        <Button click={this.handleDataFetch}/>\n        {users.length > 0 ? <UsersList users={users}/> : users}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}